
#include<iostream>
using namespace std;
int position(int n, int current[], int mobile)
{
    for (int i = 0; i < n; i++)
        if (current[i] == mobile)
           return i + 1;
}
int fact(int n)
{
    int p=1;
    for(int i=1;i<=n;i++)
        p=p*i;
    return p;
}
int findmobile(int n,int current[],int dir[])
{
    int mobile_prev = 0, mobile = 0;
    for (int i = 0; i < n; i++)
    {
        if (dir[current[i]-1] == 0 && i!=0)
        {
            if (current[i] > current[i-1] && current[i] > mobile_prev)
            {
                mobile = current[i];
                mobile_prev = mobile;
            }
        }
        if (dir[current[i]-1] == 1 && i!=n-1)
        {
            if (current[i] > current[i+1] && current[i] > mobile_prev)
            {
                mobile = current[i];
                mobile_prev = mobile;
            }
        }
    }

    if (mobile == 0 && mobile_prev == 0)
        return 0;
    else
        return mobile;
}
void generate_perm(int n,int current[],int dir[])
{
    int mobile = findmobile(n,current,dir);
    int pos = position(n,current,mobile);
    if (dir[current[pos - 1] - 1] == 0)
       swap(current[pos-1], current[pos-2]);

    else if (dir[current[pos - 1] - 1] == 1)
       swap(current[pos], current[pos-1]);

     for (int i = 0; i < n; i++)
    {
        if (current[i] > mobile)
        {
            if (dir[current[i] - 1] == 1)
                dir[current[i] - 1] = 0;
            else if (dir[current[i] - 1] == 0)
                dir[current[i] - 1] = 1;
        }
    }

    for (int i = 0; i < n; i++)
        cout << current[i];
    cout <<endl;

}
int main()
{
    int n,i,j;
    cout<<"Enter value of n"<<endl;
    cin>>n;
    int dir[n];
    for(i=0;i<n;i++)
        dir[i]=0;
    int current[n];
    cout<<"All possible permutation for value  "<<n<<endl;
    for(i=0;i<n;i++)
    {
        current[i]=i+1;
        cout<<current[i];
    }
    cout<<endl;
    int x = fact(n);
    for(j=0;j<x-1;j++)
        generate_perm(n,current,dir);

    return 0;
}
