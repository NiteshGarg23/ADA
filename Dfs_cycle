#include<iostream>
using namespace std;
int dfs(int v,int a[][50],int reach[],int n)
{
    int i,top=-1,flag=0;
    int stack[n];
    reach[v]=1;
    stack[++top]=v;
    while(top != -1)
    {
            v = stack[top];
            for (i=0;i<n;i++)
            {
                if(a[v][i] && reach[i]==0)
                {
                        stack[++top]=i;

                        reach[i]=1;
                        break;
                }
                else if(a[v][i]&&reach[i])
                {

                 if(top>1){
                        for(int j=0;j<=top-2;j++)
                        {
                            if(stack[j]==i)
                            {
                                    cout<<"Cycle is present"<<endl;
                                    //cout<<"Cycle is "<<endl;
                                    cout<<i<<"->";
                                    for(int k=j+1;k<=top;k++)
                                        cout<<stack[k]<<"->";
                                    cout<<i<<endl;

                                    flag=1;
                                    return flag;
                            }
                        }
                }
                }

            }
    if(i==n)
        top--;
    }
return flag;
}
int main()
{
    int i,j,count=0;
    int reach[20],n;
    cout<<"Enter number of vertices"<<endl;
    cin>>n;
    int a[50][50];
	cout<<"Enter the adjacency matrix "<<endl;
	for (i=0;i<n;i++)
    {
        for (j=0;j<n;j++)
            cin>>a[i][j];
    }
    for (i=0;i<n;i++)
    {
            reach[i]=0;
    }

        //int a[4][4]={{0,1,0,0},{1,0,1,0},{0,0,0,1},{0,0,0,0}};
    //int a[7][7]={{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,1,0,0,0,1,0},{0,0,0,0,0,0,1},{0,0,0,0,0,0,0}};
      int x = dfs(0,a,reach,n);
       if(!x)
       cout<<"cycle is not present"<<endl;

    return 0;
}
