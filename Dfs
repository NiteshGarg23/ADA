
#include<iostream>
using namespace std;
void dfs(int v,int a[][20],int reach[],int n) {
	int i,top=-1;
	int stack[n];
	cout<<v<<"->";
	reach[v]=1;
	stack[++top]=v;
	while(top != -1){
            v = stack[top];
	for (i=1;i<=n;i++){
	  if(a[v][i] && reach[i]==0) {
	      stack[++top]=i;
		cout<<i<<"->";
            reach[i]=1;
            break;
        }

    }
    if(i==n+1)
        top--;
	}

}


int main() {
	int i,j,count=0,flag = 0;
    int a[20][20],reach[20],n;
	cout<<"Enter number of vertices"<<endl;
	cin>>n;
	int arr[n];
	cout<<"Enter the adjacency matrix "<<endl;
	for (i=1;i<=n;i++)
	  for (j=1;j<=n;j++)
	   cin>>a[i][j];
    for(j=1;j<=n;j++)
    {
        count=0;
        for (i=1;i<=n;i++)
        {
            reach[i]=0;
        }
        cout<<"for vertex "<<j<<endl;
       dfs(j,a,reach,n);
        cout<<endl;
        for (i=1;i<=n;i++) {
            if(reach[i])
               {
                   count++;
               }
        }
        arr[j]=count;


    }
     for(i=1;i<=n;i++)
    {
        if(arr[i]!=(n))
        {
            flag=1;
            break;
        }

    }

   if(flag==1)
    cout<<"graph is not connected"<<endl;
   else
    cout<<"graph is connected"<<endl;



    return 0;
}
